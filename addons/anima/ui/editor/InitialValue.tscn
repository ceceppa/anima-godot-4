[gd_scene load_steps=7 format=2]

[ext_resource path="res://addons/anima/ui/property/AnimaPropertyFromTo.tscn" type="PackedScene" id=1]
[ext_resource path="res://addons/anima/ui/editor/InitialValue.gd" type="Script" id=2]
[ext_resource path="res://addons/anima/icons/Remove.svg" type="Texture" id=3]
[ext_resource path="res://addons/anima/fonts/Lato-Regular.ttf" type="DynamicFontData" id=6]

[sub_resource type="GDScript" id=2]
script/source = "tool
extends AnimaRectangle
class_name AnimaButton, \"res://addons/anima/icons/button.svg\"

signal button_down
signal button_up
signal toggled(button_pressed)

enum STATE {
	NORMAL,
	HOVERED,
	FOCUSED,
	PRESSED
}

const STATES := {
	STATE.NORMAL: \"Normal\",
	STATE.HOVERED: \"Hovered\",
	STATE.FOCUSED: \"Focused\",
	STATE.PRESSED: \"Pressed\"
}

export (STATE) var _test_state = STATE.NORMAL setget _set_test_state

const BUTTON_BASE_PROPERTIES := {
	# Button
	BUTTON_LABEL = {
		name = \"Button/Text\",
		type = TYPE_STRING,
		default = \"Anima Button\",
		animatable = false
	},
	BUTTON_ICON = {
		name = \"Button/ICON\",
		type = TYPE_OBJECT,
		hint = PROPERTY_HINT_RESOURCE_TYPE,
		hint_string = \"Texture\",
		default = null,
		animatable = false
	},
	BUTTON_ALIGN = {
		name = \"Button/Align\",
		type = TYPE_INT,
		hint = PROPERTY_HINT_ENUM,
		hint_string = \"Left,Center,Right\",
		default = 1,
		animatable = false
	},
	BUTTON_FONT = {
		name = \"Button/Font\",
		type = TYPE_OBJECT,
		hint = PROPERTY_HINT_RESOURCE_TYPE,
		hint_string = \"Font\",
		default = null,
		animatable = false
	},
	BUTTON_DISABLED = {
		name = \"Button/Disabled\",
		type = TYPE_BOOL,
		default = false,
	},
	BUTTON_TOGGLE_MODE = {
		name = \"Button/ToggleMode\",
		type = TYPE_BOOL,
		default = false,
	},
	BUTTON_SHORTCUT_IN_TOOLTIP = {
		name = \"Button/ShortcutInTooltip\",
		type = TYPE_BOOL,
		default = true,
	},
	BUTTON_PRESSED = {
		name = \"Button/Pressed\",
		type = TYPE_BOOL,
		default = false,
	},
	BUTTON_CONTENT_MARGIN = {
		name = \"Button/ContentMargin\",
		type = TYPE_INT,
		default = 12,
	},
	BUTTON_GROUP = {
		name = \"Button/Group\",
		type = TYPE_OBJECT,
		hint = PROPERTY_HINT_RESOURCE_TYPE,
		hint_string = \"ButtonGroup\",
		default = null
	},

	# Normal
	NORMAL_FILL_COLOR = {
		name = \"Normal/FillColor\",
		type = TYPE_COLOR,
		default = Color(\"314569\")
	},
	NORMAL_FONT_COLOR = {
		name = \"Normal/FontColor\",
		type = TYPE_COLOR,
		default = Color(\"fff\")
	},

	# Hovered
	HOVERED_USE_STYLE = {
		name = \"Hovered/UseSameStyleOf\",
		type = TYPE_STRING,
		hint = PROPERTY_HINT_ENUM,
		hint_string = \",Normal,Pressed,Focused\",
		default = \"\"
	},
	HOVERED_FILL_COLOR = {
		name = \"Hovered/FillColor\",
		type = TYPE_COLOR,
		default = Color(\"628ad1\")
	},
	HOVERED_FONT_COLOR = {
		name = \"Hovered/FontColor\",
		type = TYPE_COLOR,
		default = Color.transparent
	},
	HOVERED_SCALE = {
		name = \"Hovered/Scale\",
		type = TYPE_VECTOR2,
		default = Vector2.ONE,
	},

	# Pressed
	PRESSED_USE_STYLE = {
		name = \"Pressed/UseSameStyleOf\",
		type = TYPE_STRING,
		hint = PROPERTY_HINT_ENUM,
		hint_string = \",Normal,Hovered,Focused\",
		default = \"\"
	},
	PRESSED_FILL_COLOR = {
		name = \"Pressed/FillColor\",
		type = TYPE_COLOR,
		default = Color(\"428ad1\")
	},
	PRESSED_FONT_COLOR = {
		name = \"Pressed/FontColor\",
		type = TYPE_COLOR,
		default = Color.transparent
	},

	# Focused
	FOCUSED_USE_STYLE = {
		name = \"Focused/UseSameStyleOf\",
		type = TYPE_STRING,
		hint = PROPERTY_HINT_ENUM,
		hint_string = \",Normal,Hovered,Pressed\",
		default = \"\"
	},
	FOCUSED_FILL_COLOR = {
		name = \"Focused/FillColor\",
		type = TYPE_COLOR,
		default = Color(\"428ad1\")
	},
	FOCUSED_FONT_COLOR = {
		name = \"Focused/FontColor\",
		type = TYPE_COLOR,
		default = Color.transparent
	},
}

var _all_properties := BUTTON_BASE_PROPERTIES
var _button := Button.new()

func _init():
	._init()

	var extra_keys = [\"Normal\", \"Hovered\", \"Focused\", \"Pressed\"]

	for key in PROPERTIES:
		for extra_key_index in extra_keys.size():
			var extra_key: String = extra_keys[extra_key_index]
			var new_key = key.replace(\"RECTANGLE\", extra_key.to_upper())

			if BUTTON_BASE_PROPERTIES.has(new_key):
				continue

			var new_value = PROPERTIES[key].duplicate()

			if extra_key_index > 0:
				if new_value.default is float or new_value.default is int:
					new_value.default = -1
				elif new_value.default is Vector2:
					new_value.default = Vector2(-1, -1)
				elif new_value.default is Rect2:
					new_value.default = Rect2(-1, -1, -1, -1)
				elif new_value.default is Color:
					new_value.default = Color.transparent
					new_value.default.a = 0.00

			new_value.name = new_value.name.replace(\"Rectangle/\", extra_key + \"/\")

			_all_properties[new_key] = new_value

	# We don't want to expose the Rectangulare properties as they're only used \"internally\"
	_hide_properties(PROPERTIES)

	_add_properties(_all_properties)

	_copy_properties(\"Normal\")

	_test_state = STATE.NORMAL
	
	_init_button()

func _ready():
	_set(BUTTON_BASE_PROPERTIES.BUTTON_LABEL.name, get_property(BUTTON_BASE_PROPERTIES.BUTTON_LABEL.name))
	_set(BUTTON_BASE_PROPERTIES.BUTTON_ALIGN.name, get_property(BUTTON_BASE_PROPERTIES.BUTTON_ALIGN.name))
	_set(BUTTON_BASE_PROPERTIES.BUTTON_FONT.name, get_property(BUTTON_BASE_PROPERTIES.BUTTON_FONT.name))
	_set(BUTTON_BASE_PROPERTIES.BUTTON_TOGGLE_MODE.name, get_property(BUTTON_BASE_PROPERTIES.BUTTON_TOGGLE_MODE.name))

	_copy_properties(\"Normal\")
	
	connect(\"item_rect_changed\", self, \"_on_resize_me\")

func _init_button() -> void:
	var style := StyleBoxEmpty.new()

	for s in [\"normal\", \"hover\", \"pressed\", \"disabled\", \"focus\"]:
		_button.add_stylebox_override(s, style)

	for c in [\"font_color_disabled\", \"font_color_focus\", \"font_color\", \"font_color_hover\", \"font_color_pressed\"]:
		_button.add_color_override(c, Color.white)

	_button.connect(\"focus_entered\", self, \"_on_focus_entered\")
	_button.connect(\"focus_exited\", self, \"_on_focus_exited\")
	_button.connect(\"mouse_entered\", self, \"_on_mouse_entered\")
	_button.connect(\"mouse_exited\", self, \"_on_mouse_exited\")
	_button.connect(\"button_down\", self, \"_on_mouse_down\")
	_button.connect(\"pressed\", self, \"_on_pressed\")

	add_child(_button)

	_on_resize_me()

func _copy_properties(from: String) -> void:
	var copy_from_key = from.to_upper()

	for key in _all_properties:
		if key.find(copy_from_key) == 0:
			var property_name: String = _all_properties[key].name
			var rectangle_property_name: String = property_name.replace(from + \"/\", \"Rectangle/\")
			var value = get_property(property_name)

			if _property_exists(rectangle_property_name):
				_property_list.set(rectangle_property_name, value)
			elif property_name.find(\"/FontColor\") > 0:
				_button.add_color_override(\"font_color\", value)

func _animate_state(root_key: String) -> void:
	var override_key = get_property(root_key + \"/UseSameStyleOf\")

	if override_key:
		root_key = override_key

	var from: String = root_key.to_upper()
	var params_to_animate := []

	for key in _all_properties:
		if key.find(from) == 0:
			var property_name: String = _all_properties[key].name
			var rectangle_property_name: String = property_name.replace(root_key + \"/\", \"Rectangle/\")
			var current_value = get_property(rectangle_property_name)
			var final_value = get_property(property_name)

			if final_value is String \\
				or final_value is bool \\
				or str(final_value).find(\"-1\") >= 0 \\
				or (final_value is Color and final_value.a == 0):
				continue

			if current_value != final_value:
				params_to_animate.push_back({ property = rectangle_property_name, to = final_value })

	if root_key == \"Normal\" and rect_scale != Vector2.ONE:
		params_to_animate.push_back({ property = \"scale\", to = Vector2.ONE })

	if params_to_animate.size() > 0:
		animate_params(params_to_animate)

func refresh(state: int, ignore_if_focused := true) -> void:
	if _button.has_focus() and ignore_if_focused:
		state = STATE.FOCUSED

	if _button.toggle_mode and _button.pressed:
		state = STATE.PRESSED

	if _button.disabled:
		state = STATE.NORMAL

	_animate_state(STATES[state])

func _set(property: String, value) -> void:
	if Engine.editor_hint and property.find(\"Rectangle/\") < 0:
		prevent_animate_property_change()

	._set(property, value)

	if property.find(\"Button/\") == 0:
		if property == BUTTON_BASE_PROPERTIES.BUTTON_CONTENT_MARGIN.name:
			var style: StyleBoxEmpty = _button.get_stylebox(\"normal\")
			
			style.content_margin_bottom = value
			style.content_margin_top = value
			style.content_margin_left = value
			style.content_margin_right = value

			_on_resize_me()
		else:
			var p: String = property.replace(\"Button/\", \"\").capitalize().replace(\" \", \"_\").to_lower()
			_button.set(p.replace(\" \", \"_\").to_lower(), value)
	elif property.find(\"FontColor\") > 0:
		_button.add_color_override(\"font_color\", value)
	elif property == \"Rectangle/Scale\":
		rect_scale = value

	restore_animate_property_change()

	if Engine.editor_hint and property.find(STATES[_test_state]) >= 0 and is_inside_tree():
		_animate_state(STATES[_test_state])

func get(property):
	if property.find(\"FontColor\") >= 0:
		var color = _button.get_color(\"font_color\")

		return color
	elif property.find(\"/Scale\") > 0:
		return Vector2.ONE

	return .get(property)

func set_label(label: String) -> void:
	set(BUTTON_BASE_PROPERTIES.BUTTON_LABEL.name, label)

func get_label() -> String:
	return get(BUTTON_BASE_PROPERTIES.BUTTON_LABEL.name)

func set_icon(icon: Texture) -> void:
	set(BUTTON_BASE_PROPERTIES.BUTTON_ICON.name, icon)

func _on_mouse_entered():
	refresh(STATE.HOVERED)

func _on_mouse_exited():
	refresh(STATE.NORMAL)

func _on_mouse_down():
	refresh(STATE.PRESSED, false)

func _on_focus_entered():
	refresh(STATE.FOCUSED)

func _on_focus_exited():
	refresh(STATE.NORMAL)

func _on_pressed() -> void:
	refresh(STATE.PRESSED)

	emit_signal(\"pressed\")

func _set_test_state(new_state) -> void:
	if Engine.editor_hint:
		_test_state = new_state
		_animate_state(STATES[new_state])

func _on_resize_me() -> void:
	_button.rect_size = rect_size

	if rect_size < _button.rect_size:
		rect_size = _button.rect_size
"

[sub_resource type="DynamicFont" id=1]
use_filter = true
font_data = ExtResource( 6 )
__meta__ = {
"_original_size": 18
}

[node name="InitialValue" type="MarginContainer"]
anchor_right = 1.0
margin_bottom = 40.0
custom_constants/margin_right = 12
custom_constants/margin_top = 12
custom_constants/margin_left = 12
custom_constants/margin_bottom = 12
script = ExtResource( 2 )

[node name="GridContainer" type="GridContainer" parent="."]
margin_left = 12.0
margin_top = 12.0
margin_right = 1012.0
margin_bottom = 61.0
custom_constants/hseparation = 24
columns = 3

[node name="Label" type="Label" parent="GridContainer"]
margin_top = 12.0
margin_right = 66.0
margin_bottom = 37.0
text = "Value:"
align = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Value" parent="GridContainer" instance=ExtResource( 1 )]
margin_left = 90.0
margin_right = 944.0
margin_bottom = 49.0
label = "initial frame value"
type = 4
can_clear_custom_value = false
show_relative_selector = false

[node name="RemoveButton" type="Control" parent="GridContainer"]
margin_left = 968.0
margin_right = 1008.0
margin_bottom = 49.0
rect_min_size = Vector2( 32, 32 )
rect_pivot_offset = Vector2( 66, 24.5 )
hint_tooltip = "Remove the frame"
mouse_default_cursor_shape = 2
script = SubResource( 2 )
__meta__ = {
"__visibility_strategy": 0,
"_editor_description_": "",
"_visibility_strategy_reverted": true
}
Animation/AnimatePropertyChange = false
Animation/Speed = 0.15
Animation/Easing = 0
Button/Text = ""
Button/ICON = ExtResource( 3 )
Button/Align = 1
Button/Font = SubResource( 1 )
Button/Disabled = false
Button/ToggleMode = false
Button/ShortcutInTooltip = true
Button/Pressed = false
Button/ContentMargin = 12
Button/Group = null
Normal/FillColor = Color( 0.47451, 0.211765, 0.196078, 1 )
Normal/FontColor = Color( 1, 1, 1, 1 )
Hovered/UseSameStyleOf = ""
Hovered/FillColor = Color( 0.635294, 0.309804, 0.290196, 1 )
Hovered/FontColor = Color( 1, 1, 1, 0 )
Hovered/Scale = Vector2( 1, 1 )
Pressed/UseSameStyleOf = ""
Pressed/FillColor = Color( 0.258824, 0.541176, 0.819608, 1 )
Pressed/FontColor = Color( 1, 1, 1, 0 )
Focused/UseSameStyleOf = ""
Focused/FillColor = Color( 0.258824, 0.541176, 0.819608, 1 )
Focused/FontColor = Color( 1, 1, 1, 0 )
Normal/Size = Rect2( 0, 0, 100, 100 )
Hovered/Size = Rect2( -1, -1, -1, -1 )
Focused/Size = Rect2( -1, -1, -1, -1 )
Pressed/Size = Rect2( -1, -1, -1, -1 )
Normal/Border/Color = Color( 1, 1, 1, 0 )
Hovered/Border/Color = Color( 1, 1, 1, 0.01 )
Focused/Border/Color = Color( 1, 1, 1, 0.01 )
Pressed/Border/Color = Color( 1, 1, 1, 0.01 )
Normal/Border/Blend = false
Hovered/Border/Blend = false
Focused/Border/Blend = false
Pressed/Border/Blend = false
Normal/Border/Offset = Vector2( 0, 0 )
Hovered/Border/Offset = Vector2( -1, -1 )
Focused/Border/Offset = Vector2( -1, -1 )
Pressed/Border/Offset = Vector2( -1, -1 )
Normal/Border/Widh/Left = 0
Hovered/Border/Widh/Left = -1
Focused/Border/Widh/Left = -1
Pressed/Border/Widh/Left = -1
Normal/Border/Widh/Top = 0
Hovered/Border/Widh/Top = -1
Focused/Border/Widh/Top = -1
Pressed/Border/Widh/Top = -1
Normal/Border/Widh/Right = 0
Hovered/Border/Widh/Right = -1
Focused/Border/Widh/Right = -1
Pressed/Border/Widh/Right = -1
Normal/Border/Widh/Bottom = 0
Hovered/Border/Widh/Bottom = -1
Focused/Border/Widh/Bottom = -1
Pressed/Border/Widh/Bottom = -1
Normal/Border/Radius/Details = 8
Hovered/Border/Radius/Details = -1
Focused/Border/Radius/Details = -1
Pressed/Border/Radius/Details = -1
Normal/Border/Radius/TopLeft = 8
Hovered/Border/Radius/TopLeft = -1
Focused/Border/Radius/TopLeft = -1
Pressed/Border/Radius/TopLeft = -1
Normal/Border/Radius/TopRight = 8
Hovered/Border/Radius/TopRight = -1
Focused/Border/Radius/TopRight = -1
Pressed/Border/Radius/TopRight = -1
Normal/Border/Radius/BottomRight = 8
Hovered/Border/Radius/BottomRight = -1
Focused/Border/Radius/BottomRight = -1
Pressed/Border/Radius/BottomRight = -1
Normal/Border/Radius/BottomLeft = 8
Hovered/Border/Radius/BottomLeft = -1
Focused/Border/Radius/BottomLeft = -1
Pressed/Border/Radius/BottomLeft = -1
Normal/Border/Offset/Radius/Details = 8
Hovered/Border/Offset/Radius/Details = -1
Focused/Border/Offset/Radius/Details = -1
Pressed/Border/Offset/Radius/Details = -1
Normal/Border/Offset/Radius/TopLeft = -1
Hovered/Border/Offset/Radius/TopLeft = -1
Focused/Border/Offset/Radius/TopLeft = -1
Pressed/Border/Offset/Radius/TopLeft = -1
Normal/Border/Offset/Radius/TopRight = -1
Hovered/Border/Offset/Radius/TopRight = -1
Focused/Border/Offset/Radius/TopRight = -1
Pressed/Border/Offset/Radius/TopRight = -1
Normal/Border/Offset/Radius/BottomRight = -1
Hovered/Border/Offset/Radius/BottomRight = -1
Focused/Border/Offset/Radius/BottomRight = -1
Pressed/Border/Offset/Radius/BottomRight = -1
Normal/Border/Offset/Radius/BottomLeft = -1
Hovered/Border/Offset/Radius/BottomLeft = -1
Focused/Border/Offset/Radius/BottomLeft = -1
Pressed/Border/Offset/Radius/BottomLeft = -1
Normal/Shadow/Color = Color( 0, 0, 0, 0.517647 )
Hovered/Shadow/Color = Color( 1, 1, 1, 0 )
Focused/Shadow/Color = Color( 1, 1, 1, 0 )
Pressed/Shadow/Color = Color( 1, 1, 1, 0 )
Normal/Shadow/Size = 1
Hovered/Shadow/Size = -1
Focused/Shadow/Size = -1
Pressed/Shadow/Size = -1
Normal/Shadow/Offset = Vector2( 2, 2 )
Hovered/Shadow/Offset = Vector2( -1, -1 )
Focused/Shadow/Offset = Vector2( -1, -1 )
Pressed/Shadow/Offset = Vector2( -1, -1 )

[connection signal="value_updated" from="GridContainer/Value" to="." method="_on_PropertyFromTo_value_updated"]
[connection signal="pressed" from="GridContainer/RemoveButton" to="." method="_on_AnimaButton_pressed"]
